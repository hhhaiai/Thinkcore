package com.treecore;

import android.content.Context;
import android.net.wifi.WifiManager;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import java.util.UUID;

import com.treecore.TApplication;
import com.treecore.storage.TStorageUtils;
import com.treecore.utils.TStringUtils;
import com.treecore.utils.config.TPreferenceConfig;

public class TDeviceUuid {
	protected static final String PREFS_FILE = "device_id.xml";
	protected static final String PREFS_DEVICE_ID = "device_id";
	protected static UUID uuid;

	public TDeviceUuid() {
		if (uuid == null) {
			synchronized (TDeviceUuid.class) {
				if (uuid == null) {
					String id = TPreferenceConfig.getInstance().getString(
							PREFS_DEVICE_ID, null);
					if (id != null) {
						uuid = UUID.fromString(id);
					} else {
						try {
							id = getUuidByPhone();
							uuid = UUID.nameUUIDFromBytes(id.getBytes("utf8"));
							TPreferenceConfig.getInstance().setString(
									PREFS_DEVICE_ID, uuid.toString());
						} catch (Exception e) {
						}
					}
				}
			}
		}
	}

	private String getUuidByPhone() throws Exception {
		TelephonyManager telephonyManager = (TelephonyManager) TApplication
				.getInstance().getSystemService(Context.TELEPHONY_SERVICE);
		String result = TStorageUtils.getDeviceId(TApplication.getInstance());
		if (!TStringUtils.isEmpty(result))
			return result;
		result = telephonyManager.getSimSerialNumber();
		if (!TStringUtils.isEmpty(result))
			return result;

		result = Secure.getString(TApplication.getInstance()
				.getContentResolver(), Secure.ANDROID_ID);
		if (!TStringUtils.isEmpty(result))
			return result;

		WifiManager wm = (WifiManager) TApplication.getInstance()
				.getSystemService(Context.WIFI_SERVICE);
		result = wm.getConnectionInfo().getMacAddress();
		if (!TStringUtils.isEmpty(result))
			return result;
		throw new Exception("");
	}

	/**
	 * Returns a unique UUID for the current android device. As with all UUIDs,
	 * this unique ID is "very highly likely" to be unique across all Android
	 * devices. Much more so than ANDROID_ID is.
	 * 
	 * The UUID is generated by using ANDROID_ID as the base key if appropriate,
	 * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
	 * be incorrect, and finally falling back on a random UUID that's persisted
	 * to SharedPreferences if getDeviceID() does not return a usable value.
	 * 
	 * In some rare circumstances, this ID may change. In particular, if the
	 * device is factory reset a new device ID may be generated. In addition, if
	 * a user upgrades their phone from certain buggy implementations of Android
	 * 2.2 to a newer, non-buggy version of Android, the device ID may change.
	 * Or, if a user uninstalls your app on a device that has neither a proper
	 * Android ID nor a Device ID, this ID may change on reinstallation.
	 * 
	 * Note that if the code falls back on using TelephonyManager.getDeviceId(),
	 * the resulting ID will NOT change after a factory reset. Something to be
	 * aware of.
	 * 
	 * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
	 * directly.
	 * 
	 * @see http://code.google.com/p/android/issues/detail?id=10603
	 * 
	 * @return a UUID that may be used to uniquely identify your device for most
	 *         purposes.
	 */
	public UUID getDeviceUuid() {
		return uuid;
	}
}